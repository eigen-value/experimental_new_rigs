#######################################################################################################################
# Bendy nose contruction rules:
#
#######################################################################################################################

import bpy

from ...utils import strip_org, copy_bone, adjust_widget
from ..widgets import create_widget_from_cluster
from .meshy_rig import MeshyRig
from .chain import Chain


class Rig(MeshyRig):

    def __init__(self, obj, bone_name, params, chain_type=None):
        super().__init__(obj, bone_name, params, chain_type=chain_type)

        self.bbones = params.bbones
        self.nostril_bones = self.get_nostrils()
        self.add_front_nose_chain()

    def create_controls(self):
        bpy.ops.object.mode_set(mode='EDIT')
        edit_bones = self.obj.data.edit_bones

        super().create_controls()

        self.bones['nose_ctrl'] = {}

        nose_master_name = strip_org(self.base_bone) + '_master'
        nose_master_name = copy_bone(self.obj, self.base_bone, assign_name=nose_master_name)
        self.bones['nose_ctrl']['nose_master'] = nose_master_name

        last_bone = self.get_chain_bones(self.base_bone)[-1]
        edit_bones[nose_master_name].tail = edit_bones[last_bone].tail

    def create_widgets(self):

        bpy.ops.object.mode_set(mode='OBJECT')
        pose_bones = self.obj.pose.bones
        last_bone = self.get_chain_object_by_name(self.base_bone).get_chain_bone_by_index(index=-1)
        print(last_bone)

        nose_master = self.bones['nose_ctrl']['nose_master']
        cluster = [pose_bones[nose_master].bone.head, pose_bones[last_bone].bone.tail]
        center = pose_bones[nose_master].bone.head + pose_bones[last_bone].bone.tail

        for nostril in self.nostril_bones:
            cluster.append(pose_bones[nostril].bone.head)
            center += pose_bones[nostril].bone.head

        wgt = create_widget_from_cluster(self.obj, nose_master, cluster)
        center = center / len(cluster)
        offset = (center - pose_bones[nose_master].bone.head).magnitude
        print(offset)
        adjust_widget(wgt.data, offset=offset)

        super().create_widgets()

    def get_nostrils(self):
        return self.get_unconnected_children()

    def aggregate_ctrls(self):
        self.control_snapper.aggregate_ctrls(same_parent=False)

    def add_front_nose_chain(self):

        name = self.base_bone
        chain = Chain(self.obj, name, self.orientation_bone, chain_type=self.chain_type)
        self.chain_objects[chain.base_name] = chain
        self.chains[name] = self.get_subchains(name, exclude=self.nostril_bones)

    def parent_bones(self):
        super().parent_bones()

        edit_bones = self.obj.data.edit_bones

        for chain in self.chain_objects:
            chain_object = self.chain_objects[chain]

            def_bones = chain_object.get_chain_bones_by_type('def')
            for i, name in enumerate(def_bones):
                def_bone = edit_bones[name]
                parent = chain_object.get_chain_bone_by_index(index=i - 1, bone_type='def')
                if parent and def_bone.parent is None:
                    def_bone.parent = edit_bones[parent]
                    def_bone.use_connect = True

    def cleanup(self):
        super().cleanup()
        def_bones = self.flatten(self.bones['def'])
        for bone in def_bones:
            self.obj.data.bones[bone].bbone_segments = self.bbones

    def generate(self):
        return super().generate()


def add_parameters(params):
    """ Add the parameters of this rig type to the
        RigifyParameters PropertyGroup
    """

    params.bbones = bpy.props.IntProperty(
        name='bbone segments',
        default=3,
        min=1,
        description='Number of segments'
    )


def parameters_ui(layout, params):
    """ Create the ui for the rig parameters."""

    r = layout.row()
    r.prop(params, "bbones")


def create_sample(obj):
    # generated by rigify.utils.write_metarig
    bpy.ops.object.mode_set(mode='EDIT')
    arm = obj.data

    bones = {}

    bone = arm.edit_bones.new('nose')
    bone.head[:] = 0.0000, 0.0000, 1.0000
    bone.tail[:] = 0.0000, -1.2000, 1.4000
    bone.roll = 0.0000
    bone.use_connect = False
    bones['nose'] = bone.name
    bone = arm.edit_bones.new('nose.001')
    bone.head[:] = 0.0000, -1.2000, 1.4000
    bone.tail[:] = 0.0000, -0.8485, 2.2882
    bone.roll = 0.0000
    bone.use_connect = True
    bone.parent = arm.edit_bones[bones['nose']]
    bones['nose.001'] = bone.name
    bone = arm.edit_bones.new('nostril.L')
    bone.head[:] = 0.5169, 0.0000, 1.3000
    bone.tail[:] = 0.4744, -0.6000, 1.3500
    bone.roll = -1.3318
    bone.use_connect = False
    bone.parent = arm.edit_bones[bones['nose']]
    bones['nostril.L'] = bone.name
    bone = arm.edit_bones.new('nostril.R')
    bone.head[:] = -0.5169, 0.0000, 1.3000
    bone.tail[:] = -0.4744, -0.6000, 1.3500
    bone.roll = 1.3318
    bone.use_connect = False
    bone.parent = arm.edit_bones[bones['nose']]
    bones['nostril.R'] = bone.name
    bone = arm.edit_bones.new('nose.002')
    bone.head[:] = 0.0000, -0.8485, 2.2882
    bone.tail[:] = 0.0000, 0.0000, 3.1000
    bone.roll = 0.0000
    bone.use_connect = True
    bone.parent = arm.edit_bones[bones['nose.001']]
    bones['nose.002'] = bone.name
    bone = arm.edit_bones.new('nostril.L.001')
    bone.head[:] = 0.4744, -0.6000, 1.3500
    bone.tail[:] = 0.0000, -1.2000, 1.4000
    bone.roll = -2.8288
    bone.use_connect = True
    bone.parent = arm.edit_bones[bones['nostril.L']]
    bones['nostril.L.001'] = bone.name
    bone = arm.edit_bones.new('nostril.R.001')
    bone.head[:] = -0.4744, -0.6000, 1.3500
    bone.tail[:] = -0.0000, -1.2000, 1.4000
    bone.roll = 2.8288
    bone.use_connect = True
    bone.parent = arm.edit_bones[bones['nostril.R']]
    bones['nostril.R.001'] = bone.name

    bpy.ops.object.mode_set(mode='OBJECT')
    pbone = obj.pose.bones[bones['nose']]
    pbone.rigify_type = 'experimental.bendy_nose'
    pbone.lock_location = (False, False, False)
    pbone.lock_rotation = (False, False, False)
    pbone.lock_rotation_w = False
    pbone.lock_scale = (False, False, False)
    pbone.rotation_mode = 'QUATERNION'
    pbone = obj.pose.bones[bones['nose.001']]
    pbone.rigify_type = ''
    pbone.lock_location = (False, False, False)
    pbone.lock_rotation = (False, False, False)
    pbone.lock_rotation_w = False
    pbone.lock_scale = (False, False, False)
    pbone.rotation_mode = 'QUATERNION'
    pbone = obj.pose.bones[bones['nostril.L']]
    pbone.rigify_type = ''
    pbone.lock_location = (False, False, False)
    pbone.lock_rotation = (False, False, False)
    pbone.lock_rotation_w = False
    pbone.lock_scale = (False, False, False)
    pbone.rotation_mode = 'QUATERNION'
    pbone = obj.pose.bones[bones['nostril.R']]
    pbone.rigify_type = ''
    pbone.lock_location = (False, False, False)
    pbone.lock_rotation = (False, False, False)
    pbone.lock_rotation_w = False
    pbone.lock_scale = (False, False, False)
    pbone.rotation_mode = 'QUATERNION'
    pbone = obj.pose.bones[bones['nose.002']]
    pbone.rigify_type = ''
    pbone.lock_location = (False, False, False)
    pbone.lock_rotation = (False, False, False)
    pbone.lock_rotation_w = False
    pbone.lock_scale = (False, False, False)
    pbone.rotation_mode = 'QUATERNION'
    pbone = obj.pose.bones[bones['nostril.L.001']]
    pbone.rigify_type = ''
    pbone.lock_location = (False, False, False)
    pbone.lock_rotation = (False, False, False)
    pbone.lock_rotation_w = False
    pbone.lock_scale = (False, False, False)
    pbone.rotation_mode = 'QUATERNION'
    pbone = obj.pose.bones[bones['nostril.R.001']]
    pbone.rigify_type = ''
    pbone.lock_location = (False, False, False)
    pbone.lock_rotation = (False, False, False)
    pbone.lock_rotation_w = False
    pbone.lock_scale = (False, False, False)
    pbone.rotation_mode = 'QUATERNION'

    bpy.ops.object.mode_set(mode='EDIT')
    for bone in arm.edit_bones:
        bone.select = False
        bone.select_head = False
        bone.select_tail = False
    for b in bones:
        bone = arm.edit_bones[bones[b]]
        bone.select = True
        bone.select_head = True
        bone.select_tail = True
        arm.edit_bones.active = bone
